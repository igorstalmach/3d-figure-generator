// Generated from ./src/grammar/GeometryGrammar.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class GeometryGrammarLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly SIZE = 12;
	public static readonly COLOR = 13;
	public static readonly HEX_COLOR = 14;
	public static readonly INT = 15;
	public static readonly FLOAT = 16;
	public static readonly WS = 17;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "SIZE", "COLOR", "HEX_COLOR", "INT", "FLOAT", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'draw'", "'sphere'", "','", "'box,'", "'pyramid,'", "'size'", 
		"'radius'", "'color'", "'position'", "'/'", "'rotation'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, "SIZE", "COLOR", 
		"HEX_COLOR", "INT", "FLOAT", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(GeometryGrammarLexer._LITERAL_NAMES, GeometryGrammarLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return GeometryGrammarLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(GeometryGrammarLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "GeometryGrammar.g4"; }

	// @Override
	public get ruleNames(): string[] { return GeometryGrammarLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return GeometryGrammarLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return GeometryGrammarLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return GeometryGrammarLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 13:
			this.HEX_COLOR_action(_localctx, actionIndex);
			break;
		}
	}
	private HEX_COLOR_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			6
			break;
		}
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x13\xA8\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03" +
		"\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03" +
		"\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03" +
		"\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0E\x87" +
		"\n\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x06\x10" +
		"\x90\n\x10\r\x10\x0E\x10\x91\x03\x11\x05\x11\x95\n\x11\x03\x11\x06\x11" +
		"\x98\n\x11\r\x11\x0E\x11\x99\x03\x11\x03\x11\x06\x11\x9E\n\x11\r\x11\x0E" +
		"\x11\x9F\x03\x12\x06\x12\xA3\n\x12\r\x12\x0E\x12\xA4\x03\x12\x03\x12\x02" +
		"\x02\x02\x13\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r" +
		"\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B" +
		"\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13\x03\x02\x05\x05\x02" +
		"2;CHch\x03\x022;\x05\x02\v\f\x0F\x0F\"\"\x02\xB1\x02\x03\x03\x02\x02\x02" +
		"\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02" +
		"\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02" +
		"\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02" +
		"\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02" +
		"\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02" +
		"#\x03\x02\x02\x02\x03%\x03\x02\x02\x02\x05*\x03\x02\x02\x02\x071\x03\x02" +
		"\x02\x02\t3\x03\x02\x02\x02\v8\x03\x02\x02\x02\rA\x03\x02\x02\x02\x0F" +
		"F\x03\x02\x02\x02\x11M\x03\x02\x02\x02\x13S\x03\x02\x02\x02\x15\\\x03" +
		"\x02\x02\x02\x17^\x03\x02\x02\x02\x19g\x03\x02\x02\x02\x1B\x86\x03\x02" +
		"\x02\x02\x1D\x88\x03\x02\x02\x02\x1F\x8F\x03\x02\x02\x02!\x94\x03\x02" +
		"\x02\x02#\xA2\x03\x02\x02\x02%&\x07f\x02\x02&\'\x07t\x02\x02\'(\x07c\x02" +
		"\x02()\x07y\x02\x02)\x04\x03\x02\x02\x02*+\x07u\x02\x02+,\x07r\x02\x02" +
		",-\x07j\x02\x02-.\x07g\x02\x02./\x07t\x02\x02/0\x07g\x02\x020\x06\x03" +
		"\x02\x02\x0212\x07.\x02\x022\b\x03\x02\x02\x0234\x07d\x02\x0245\x07q\x02" +
		"\x0256\x07z\x02\x0267\x07.\x02\x027\n\x03\x02\x02\x0289\x07r\x02\x029" +
		":\x07{\x02\x02:;\x07t\x02\x02;<\x07c\x02\x02<=\x07o\x02\x02=>\x07k\x02" +
		"\x02>?\x07f\x02\x02?@\x07.\x02\x02@\f\x03\x02\x02\x02AB\x07u\x02\x02B" +
		"C\x07k\x02\x02CD\x07|\x02\x02DE\x07g\x02\x02E\x0E\x03\x02\x02\x02FG\x07" +
		"t\x02\x02GH\x07c\x02\x02HI\x07f\x02\x02IJ\x07k\x02\x02JK\x07w\x02\x02" +
		"KL\x07u\x02\x02L\x10\x03\x02\x02\x02MN\x07e\x02\x02NO\x07q\x02\x02OP\x07" +
		"n\x02\x02PQ\x07q\x02\x02QR\x07t\x02\x02R\x12\x03\x02\x02\x02ST\x07r\x02" +
		"\x02TU\x07q\x02\x02UV\x07u\x02\x02VW\x07k\x02\x02WX\x07v\x02\x02XY\x07" +
		"k\x02\x02YZ\x07q\x02\x02Z[\x07p\x02\x02[\x14\x03\x02\x02\x02\\]\x071\x02" +
		"\x02]\x16\x03\x02\x02\x02^_\x07t\x02\x02_`\x07q\x02\x02`a\x07v\x02\x02" +
		"ab\x07c\x02\x02bc\x07v\x02\x02cd\x07k\x02\x02de\x07q\x02\x02ef\x07p\x02" +
		"\x02f\x18\x03\x02\x02\x02gh\x05\x1F\x10\x02hi\x071\x02\x02ij\x05\x1F\x10" +
		"\x02jk\x071\x02\x02kl\x05\x1F\x10\x02l\x1A\x03\x02\x02\x02mn\x07t\x02" +
		"\x02no\x07g\x02\x02o\x87\x07f\x02\x02pq\x07d\x02\x02qr\x07n\x02\x02rs" +
		"\x07w\x02\x02s\x87\x07g\x02\x02tu\x07i\x02\x02uv\x07t\x02\x02vw\x07g\x02" +
		"\x02wx\x07g\x02\x02x\x87\x07p\x02\x02yz\x07{\x02\x02z{\x07g\x02\x02{|" +
		"\x07n\x02\x02|}\x07n\x02\x02}~\x07q\x02\x02~\x87\x07y\x02\x02\x7F\x80" +
		"\x07q\x02\x02\x80\x81\x07t\x02\x02\x81\x82\x07c\x02\x02\x82\x83\x07p\x02" +
		"\x02\x83\x84\x07i\x02\x02\x84\x87\x07g\x02\x02\x85\x87\x05\x1D\x0F\x02" +
		"\x86m\x03\x02\x02\x02\x86p\x03\x02\x02\x02\x86t\x03\x02\x02\x02\x86y\x03" +
		"\x02\x02\x02\x86\x7F\x03\x02\x02\x02\x86\x85\x03\x02\x02\x02\x87\x1C\x03" +
		"\x02\x02\x02\x88\x89\x072\x02\x02\x89\x8A\x07z\x02\x02\x8A\x8B\x03\x02" +
		"\x02\x02\x8B\x8C\t\x02\x02\x02\x8C\x8D\b\x0F\x02\x02\x8D\x1E\x03\x02\x02" +
		"\x02\x8E\x90\t\x03\x02\x02\x8F\x8E\x03\x02\x02\x02\x90\x91\x03\x02\x02" +
		"\x02\x91\x8F\x03\x02\x02\x02\x91\x92\x03\x02\x02\x02\x92 \x03\x02\x02" +
		"\x02\x93\x95\x07/\x02\x02\x94\x93\x03\x02\x02\x02\x94\x95\x03\x02\x02" +
		"\x02\x95\x97\x03\x02\x02\x02\x96\x98\t\x03\x02\x02\x97\x96\x03\x02\x02" +
		"\x02\x98\x99\x03\x02\x02\x02\x99\x97\x03\x02\x02\x02\x99\x9A\x03\x02\x02" +
		"\x02\x9A\x9B\x03\x02\x02\x02\x9B\x9D\x070\x02\x02\x9C\x9E\t\x03\x02\x02" +
		"\x9D\x9C\x03\x02\x02\x02\x9E\x9F\x03\x02\x02\x02\x9F\x9D\x03\x02\x02\x02" +
		"\x9F\xA0\x03\x02\x02\x02\xA0\"\x03\x02\x02\x02\xA1\xA3\t\x04\x02\x02\xA2" +
		"\xA1\x03\x02\x02\x02\xA3\xA4\x03\x02\x02\x02\xA4\xA2\x03\x02\x02\x02\xA4" +
		"\xA5\x03\x02\x02\x02\xA5\xA6\x03\x02\x02\x02\xA6\xA7\b\x12\x03\x02\xA7" +
		"$\x03\x02\x02\x02\t\x02\x86\x91\x94\x99\x9F\xA4\x04\x03\x0F\x02\b\x02" +
		"\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!GeometryGrammarLexer.__ATN) {
			GeometryGrammarLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(GeometryGrammarLexer._serializedATN));
		}

		return GeometryGrammarLexer.__ATN;
	}

}

